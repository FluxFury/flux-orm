"""Initial migration

Revision ID: b8cd3826cfcc
Revises: 
Create Date: 2025-04-29 23:17:58.557812

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b8cd3826cfcc'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('coach',
    sa.Column('coach_id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('regalia', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('coach_id')
    )
    op.create_table('competition_category',
    sa.Column('category_id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('category_id')
    )
    op.create_table('match_ai_statement',
    sa.Column('statement_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('statement_id')
    )
    op.create_table('match_status',
    sa.Column('status_id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('status', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('status_id')
    )
    op.create_table('sport',
    sa.Column('sport_id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('sport_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('team',
    sa.Column('team_id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('pretty_name', sa.String(), nullable=True),
    sa.Column('team_url', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('regalia', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('team_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('team_member',
    sa.Column('player_id', sa.Uuid(), nullable=False),
    sa.Column('team_member_url', sa.String(), nullable=True),
    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('nickname', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('player_id'),
    sa.UniqueConstraint('nickname', 'name', 'image_url', name='team_member_nickname_name_image_unique')
    )
    op.create_table('coach_in_team',
    sa.Column('coach_id', sa.Uuid(), nullable=False),
    sa.Column('team_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['coach_id'], ['coach.coach_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['team.team_id'], ),
    sa.PrimaryKeyConstraint('coach_id', 'team_id')
    )
    op.create_table('competition',
    sa.Column('competition_id', sa.Uuid(), nullable=False),
    sa.Column('sport_id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('prize_pool', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['sport_id'], ['sport.sport_id'], ),
    sa.PrimaryKeyConstraint('competition_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('formatted_news',
    sa.Column('formatted_news_id', sa.Uuid(), nullable=False),
    sa.Column('sport_id', sa.Uuid(), nullable=False),
    sa.Column('header', sa.String(), nullable=True),
    sa.Column('text', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('keywords', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('news_creation_time', sa.TIMESTAMP(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['sport_id'], ['sport.sport_id'], ),
    sa.PrimaryKeyConstraint('formatted_news_id')
    )
    op.create_table('player_in_team',
    sa.Column('player_id', sa.Uuid(), nullable=False),
    sa.Column('team_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['team_member.player_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['team.team_id'], ),
    sa.PrimaryKeyConstraint('player_id', 'team_id')
    )
    op.create_table('raw_news',
    sa.Column('raw_news_id', sa.Uuid(), nullable=False),
    sa.Column('sport_id', sa.Uuid(), nullable=False),
    sa.Column('header', sa.String(), nullable=True),
    sa.Column('text', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('news_creation_time', sa.TIMESTAMP(), nullable=True),
    sa.Column('pipeline_status', sa.Enum('NEW', 'SENT', 'PROCESSED', 'ERROR', name='pipelinestatus'), nullable=False),
    sa.Column('pipeline_update_time', sa.TIMESTAMP(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['sport_id'], ['sport.sport_id'], ),
    sa.PrimaryKeyConstraint('raw_news_id')
    )
    op.create_table('competition_in_category',
    sa.Column('competition_id', sa.Uuid(), nullable=False),
    sa.Column('category_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['competition_category.category_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['competition_id'], ['competition.competition_id'], ),
    sa.PrimaryKeyConstraint('competition_id', 'category_id')
    )
    op.create_table('match',
    sa.Column('match_id', sa.Uuid(), nullable=False),
    sa.Column('sport_id', sa.Uuid(), nullable=False),
    sa.Column('match_name', sa.String(), nullable=False),
    sa.Column('pretty_match_name', sa.String(), nullable=True),
    sa.Column('match_streams', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('match_url', sa.String(), nullable=True),
    sa.Column('tournament_url', sa.String(), nullable=True),
    sa.Column('external_id', sa.String(), nullable=False),
    sa.Column('competition_id', sa.Uuid(), nullable=True),
    sa.Column('status_id', sa.Uuid(), nullable=True),
    sa.Column('planned_start_datetime', sa.DateTime(), nullable=True),
    sa.Column('end_datetime', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['competition_id'], ['competition.competition_id'], ),
    sa.ForeignKeyConstraint(['sport_id'], ['sport.sport_id'], ),
    sa.ForeignKeyConstraint(['status_id'], ['match_status.status_id'], ),
    sa.PrimaryKeyConstraint('match_id'),
    sa.UniqueConstraint('external_id'),
    sa.UniqueConstraint('match_name', 'planned_start_datetime', name='match_name_planned_start_datetime_unique')
    )
    op.create_table('team_in_competition',
    sa.Column('team_id', sa.Uuid(), nullable=False),
    sa.Column('competition_id', sa.Uuid(), nullable=False),
    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('place', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['competition_id'], ['competition.competition_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['team.team_id'], ),
    sa.PrimaryKeyConstraint('team_id', 'competition_id')
    )
    op.create_table('ai_statement_in_match',
    sa.Column('statement_id', sa.Uuid(), nullable=False),
    sa.Column('match_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['match_id'], ['match.match_id'], ),
    sa.ForeignKeyConstraint(['statement_id'], ['match_ai_statement.statement_id'], ),
    sa.PrimaryKeyConstraint('statement_id', 'match_id')
    )
    op.create_table('filtered_match_in_news',
    sa.Column('match_id', sa.Uuid(), nullable=False),
    sa.Column('news_id', sa.Uuid(), nullable=False),
    sa.Column('respective_relevance', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['match_id'], ['match.match_id'], ),
    sa.ForeignKeyConstraint(['news_id'], ['formatted_news.formatted_news_id'], ),
    sa.PrimaryKeyConstraint('match_id', 'news_id')
    )
    op.create_table('substitution',
    sa.Column('match_id', sa.Uuid(), nullable=False),
    sa.Column('prev_player_id', sa.Uuid(), nullable=False),
    sa.Column('new_player_id', sa.Uuid(), nullable=False),
    sa.Column('time', sa.Integer(), nullable=True),
    sa.Column('team_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['match_id'], ['match.match_id'], ),
    sa.ForeignKeyConstraint(['new_player_id'], ['team_member.player_id'], ),
    sa.ForeignKeyConstraint(['prev_player_id'], ['team_member.player_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['team.team_id'], ),
    sa.PrimaryKeyConstraint('match_id', 'prev_player_id', 'new_player_id')
    )
    op.create_table('team_in_match',
    sa.Column('team_id', sa.Uuid(), nullable=False),
    sa.Column('match_id', sa.Uuid(), nullable=False),
    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('place', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['match_id'], ['match.match_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['team.team_id'], ),
    sa.PrimaryKeyConstraint('team_id', 'match_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('team_in_match')
    op.drop_table('substitution')
    op.drop_table('filtered_match_in_news')
    op.drop_table('ai_statement_in_match')
    op.drop_table('team_in_competition')
    op.drop_table('match')
    op.drop_table('competition_in_category')
    op.drop_table('raw_news')
    op.drop_table('player_in_team')
    op.drop_table('formatted_news')
    op.drop_table('competition')
    op.drop_table('coach_in_team')
    op.drop_table('team_member')
    op.drop_table('team')
    op.drop_table('sport')
    op.drop_table('match_status')
    op.drop_table('match_ai_statement')
    op.drop_table('competition_category')
    op.drop_table('coach')
    # ### end Alembic commands ###
