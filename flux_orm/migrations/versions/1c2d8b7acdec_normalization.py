"""normalization

Revision ID: 1c2d8b7acdec
Revises: 8032e52dd316
Create Date: 2025-04-15 22:22:07.126334

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1c2d8b7acdec'
down_revision: Union[str, None] = '8032e52dd316'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('concurrency_limits')
    op.drop_index('idx_backfill_tags_backfill_id', table_name='backfill_tags')
    op.drop_table('backfill_tags')
    op.drop_table('secondary_indexes')
    op.drop_table('snapshots')
    op.drop_index('idx_pending_steps', table_name='pending_steps')
    op.drop_table('pending_steps')
    op.drop_index('idx_run_tags', table_name='run_tags')
    op.drop_index('idx_run_tags_run_idx', table_name='run_tags')
    op.drop_table('run_tags')
    op.drop_table('asset_keys')
    op.drop_index('idx_kvs_keys_unique', table_name='kvs')
    op.drop_table('kvs')
    op.drop_index('idx_asset_event_tags', table_name='asset_event_tags')
    op.drop_index('idx_asset_event_tags_event_id', table_name='asset_event_tags')
    op.drop_table('asset_event_tags')
    op.drop_index('idx_asset_check_executions', table_name='asset_check_executions')
    op.drop_index('idx_asset_check_executions_unique', table_name='asset_check_executions')
    op.drop_table('asset_check_executions')
    op.drop_table('daemon_heartbeats')
    op.drop_table('concurrency_slots')
    op.drop_index('idx_event_type', table_name='event_logs')
    op.drop_index('idx_events_by_asset', table_name='event_logs', postgresql_where='(asset_key IS NOT NULL)')
    op.drop_index('idx_events_by_asset_partition', table_name='event_logs', postgresql_where='((asset_key IS NOT NULL) AND (partition IS NOT NULL))')
    op.drop_index('idx_events_by_run_id', table_name='event_logs')
    op.drop_index('idx_step_key', table_name='event_logs')
    op.drop_table('event_logs')
    op.drop_index('idx_run_partitions', table_name='runs')
    op.drop_index('idx_run_range', table_name='runs')
    op.drop_index('idx_run_status', table_name='runs')
    op.drop_index('idx_runs_by_backfill_id', table_name='runs')
    op.drop_index('idx_runs_by_job', table_name='runs')
    op.drop_table('runs')
    op.drop_table('instance_info')
    op.drop_index('idx_bulk_actions', table_name='bulk_actions')
    op.drop_index('idx_bulk_actions_action_type', table_name='bulk_actions')
    op.drop_index('idx_bulk_actions_selector_id', table_name='bulk_actions')
    op.drop_index('idx_bulk_actions_status', table_name='bulk_actions')
    op.drop_table('bulk_actions')
    op.drop_table('formatted_matched_news')
    op.drop_index('idx_dynamic_partitions', table_name='dynamic_partitions')
    op.drop_table('dynamic_partitions')
    op.add_column('filtered_match_in_news', sa.Column('respective_relevance', sa.Integer(), nullable=False))
    op.add_column('filtered_match_in_news', sa.Column('created_at', sa.TIMESTAMP(), nullable=False))
    op.add_column('filtered_match_in_news', sa.Column('updated_at', sa.TIMESTAMP(), nullable=False))
    op.add_column('formatted_news', sa.Column('keywords', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('formatted_news', 'keywords')
    op.drop_column('filtered_match_in_news', 'updated_at')
    op.drop_column('filtered_match_in_news', 'created_at')
    op.drop_column('filtered_match_in_news', 'respective_relevance')
    op.create_table('dynamic_partitions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('partitions_def_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('partition', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('create_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='dynamic_partitions_pkey')
    )
    op.create_index('idx_dynamic_partitions', 'dynamic_partitions', ['partitions_def_name', 'partition'], unique=True)
    op.create_table('formatted_matched_news',
    sa.Column('formatted_matched_news_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('header', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('text', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('news_creation_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sport_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['sport_id'], ['sport.sport_id'], name='formatted_matched_news_sport_id_fkey'),
    sa.PrimaryKeyConstraint('formatted_matched_news_id', name='formatted_matched_news_pkey')
    )
    op.create_table('bulk_actions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('key', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('action_type', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('selector_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='bulk_actions_pkey'),
    sa.UniqueConstraint('key', name='bulk_actions_key_key')
    )
    op.create_index('idx_bulk_actions_status', 'bulk_actions', ['status'], unique=False)
    op.create_index('idx_bulk_actions_selector_id', 'bulk_actions', ['selector_id'], unique=False)
    op.create_index('idx_bulk_actions_action_type', 'bulk_actions', ['action_type'], unique=False)
    op.create_index('idx_bulk_actions', 'bulk_actions', ['key'], unique=False)
    op.create_table('instance_info',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('run_storage_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='instance_info_pkey')
    )
    op.create_table('runs',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('runs_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('snapshot_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('pipeline_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('mode', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=63), autoincrement=False, nullable=True),
    sa.Column('run_body', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('partition', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('partition_set', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('create_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('update_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('start_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('end_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('backfill_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['snapshot_id'], ['snapshots.snapshot_id'], name='fk_runs_snapshot_id_snapshots_snapshot_id'),
    sa.PrimaryKeyConstraint('id', name='runs_pkey'),
    sa.UniqueConstraint('run_id', name='runs_run_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_runs_by_job', 'runs', ['pipeline_name', 'id'], unique=False)
    op.create_index('idx_runs_by_backfill_id', 'runs', ['backfill_id', 'id'], unique=False)
    op.create_index('idx_run_status', 'runs', ['status'], unique=False)
    op.create_index('idx_run_range', 'runs', ['status', 'update_timestamp', 'create_timestamp'], unique=False)
    op.create_index('idx_run_partitions', 'runs', ['partition_set', 'partition'], unique=False)
    op.create_table('event_logs',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('event', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('dagster_event_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('step_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('asset_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('partition', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='event_logs_pkey')
    )
    op.create_index('idx_step_key', 'event_logs', ['step_key'], unique=False)
    op.create_index('idx_events_by_run_id', 'event_logs', ['run_id', 'id'], unique=False)
    op.create_index('idx_events_by_asset_partition', 'event_logs', ['asset_key', 'dagster_event_type', 'partition', 'id'], unique=False, postgresql_where='((asset_key IS NOT NULL) AND (partition IS NOT NULL))')
    op.create_index('idx_events_by_asset', 'event_logs', ['asset_key', 'dagster_event_type', 'id'], unique=False, postgresql_where='(asset_key IS NOT NULL)')
    op.create_index('idx_event_type', 'event_logs', ['dagster_event_type', 'id'], unique=False)
    op.create_table('concurrency_slots',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('concurrency_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('step_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('create_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='concurrency_slots_pkey')
    )
    op.create_table('daemon_heartbeats',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('daemon_type', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('daemon_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='daemon_heartbeats_pkey'),
    sa.UniqueConstraint('daemon_type', name='daemon_heartbeats_daemon_type_key')
    )
    op.create_table('asset_check_executions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('asset_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('check_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('partition', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('run_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('execution_status', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('evaluation_event', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('evaluation_event_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('evaluation_event_storage_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('materialization_event_storage_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('create_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='asset_check_executions_pkey')
    )
    op.create_index('idx_asset_check_executions_unique', 'asset_check_executions', ['asset_key', 'check_name', 'run_id', 'partition'], unique=True)
    op.create_index('idx_asset_check_executions', 'asset_check_executions', ['asset_key', 'check_name', 'materialization_event_storage_id', 'partition'], unique=False)
    op.create_table('asset_event_tags',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('asset_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('event_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='asset_event_tags_pkey')
    )
    op.create_index('idx_asset_event_tags_event_id', 'asset_event_tags', ['event_id'], unique=False)
    op.create_index('idx_asset_event_tags', 'asset_event_tags', ['asset_key', 'key', 'value'], unique=False)
    op.create_table('kvs',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='kvs_pkey')
    )
    op.create_index('idx_kvs_keys_unique', 'kvs', ['key'], unique=True)
    op.create_table('asset_keys',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('asset_key', sa.VARCHAR(length=512), autoincrement=False, nullable=True),
    sa.Column('last_materialization', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_run_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('asset_details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('wipe_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_materialization_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tags', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('create_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('cached_status_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='asset_keys_pkey'),
    sa.UniqueConstraint('asset_key', name='asset_keys_asset_key_key')
    )
    op.create_table('run_tags',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['run_id'], ['runs.run_id'], name='run_tags_run_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='run_tags_pkey')
    )
    op.create_index('idx_run_tags_run_idx', 'run_tags', ['run_id', 'id'], unique=False)
    op.create_index('idx_run_tags', 'run_tags', ['key', 'value'], unique=False)
    op.create_table('pending_steps',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('concurrency_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('step_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('assigned_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('create_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pending_steps_pkey')
    )
    op.create_index('idx_pending_steps', 'pending_steps', ['concurrency_key', 'run_id', 'step_key'], unique=True)
    op.create_table('snapshots',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('snapshot_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('snapshot_body', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('snapshot_type', sa.VARCHAR(length=63), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='snapshots_pkey'),
    sa.UniqueConstraint('snapshot_id', name='snapshots_snapshot_id_key')
    )
    op.create_table('secondary_indexes',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=512), autoincrement=False, nullable=True),
    sa.Column('create_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('migration_completed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='secondary_indexes_pkey'),
    sa.UniqueConstraint('name', name='secondary_indexes_name_key')
    )
    op.create_table('backfill_tags',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('backfill_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='backfill_tags_pkey')
    )
    op.create_index('idx_backfill_tags_backfill_id', 'backfill_tags', ['backfill_id', 'id'], unique=False)
    op.create_table('concurrency_limits',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('concurrency_key', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.Column('limit', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('using_default_limit', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('update_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('create_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='concurrency_limits_pkey'),
    sa.UniqueConstraint('concurrency_key', name='concurrency_limits_concurrency_key_key')
    )
    # ### end Alembic commands ###
